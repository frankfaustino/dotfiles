" ————— Options ———————————————————————————————————————————————————————
filetype plugin indent on       "       detect filetype, load plugin/indent file for filetype
set history=50                  "hi:    keep 50 lines of command line history
set ruler                       "ru:    show the cursor position all the time
set showcmd                     "sc:    display incomplete commands
set hidden                      "hid:   don't care about closing modified buffers
set winminheight=0              "wmh:   allow showing windows as just status bars
set mouse=a                     "       enable the use of mouse
set nowrap                      "       soft-wrapping is off by default
set incsearch                   "       incremental searching
set hlsearch                    "       highlights search results
set ch=1                        "       make command line one line high
set encoding=utf-8              "       set character encoding to UTF-8
set termguicolors               "       uses full 24-bit colors
set backspace=indent,eol,start  "       delete over line breaks, or automatically-inserted
                                "       indentation, or the place where insert mode started

" ————— Folding ———————————————————————————————————————————————————————
set foldmethod=syntax           "fdm:   fold by the indentation by default
set foldnestmax=10              "fdn:   deepest fold is 10 levels
set nofoldenable                "nofen: don't fold by default
set foldlevel=1

" ————— Programming ———————————————————————————————————————————————————
syntax on                       "syn:   syntax highlighting
set cindent                     "cin:   enables automatic indenting c-style
set cinoptions=l1,j1            "cino:  affects the way cindent reindents lines
set showmatch                   "sm:    flashes matching brackets or parenthasis
set matchtime=3                 "mat:   how long to flash brackets

" ————— Tabs ——————————————————————————————————————————————————————————
set tabstop=2                   "ts:    number of spaces that a tab renders as
set shiftwidth=2                "sw:    number of spaces to use for autoindent
set softtabstop=2               "sts:   number of spaces that tabs insert
set smarttab                    "sta:   helps with backspacing because of expandtab
set expandtab                   "et:    uses spaces instead of tab characters

" ————— Backups ———————————————————————————————————————————————————————
set nobackup                    "nobk:  in this age of version control, who needs it
set nowritebackup               "nowb:  don't make a backup before overwriting
set noswapfile                  "noswf: don't litter swap files everywhere
set directory=/tmp              "dir:   directory for temp files

" ————— HUD & Status Info —————————————————————————————————————————————
set number                      "nu:    numbers lines
set numberwidth=5               "nuw:   width of number column
set noshowmode                  "smd:   hides current vi mode in lower left (hidden for lightline)
set cmdheight=1                 "ch:    make a little more room for error messages
set scrolloff=4                 "so:    places a couple lines between the current line and the screen edge
set sidescrolloff=2             "siso:  places a couple lines between the current column and the screen edge
set laststatus=2                "ls:    makes the status bar always visible
set ttyfast                     "tf:    improves redrawing for newer computers
set lazyredraw                  "lz:    will not redraw the screen while running macros (goes faster)

" ————— Mappings ——————————————————————————————————————————————————————

" remap jk to escape
inoremap jk <Esc>
" \d toggles NERDTree
nnoremap <leader>d :NERDTreeToggle<CR>
" [s moves cursor to previous lint error
nmap <silent> [s <Plug>(ale_previous_wrap)
" ]s moves cursor to next lint error
nmap <silent> ]s <Plug>(ale_next_wrap)
" \= attempts to fix lint error
nmap <leader>= <Plug>(ale_fix)
" \; opens linter log window
nmap <leader>; :lopen<CR>

" ————— Plugins ———————————————————————————————————————————————————————

call plug#begin('~/.vim/plugged')
Plug 'dracula/vim', { 'as': 'dracula' }  " dracula theme
Plug 'mhartington/oceanic-next'       " oceanic-next theme
Plug 'gertjanreynaert/cobalt2-vim-theme' " port of wes bos's cobalt2 theme
Plug 'bling/vim-airline'              " airline statusbar
Plug 'vim-airline/vim-airline-themes' " airline statusbar themes
Plug 'yggdroot/indentline'            " display the indention levels with thin vertical lines
Plug 'othree/yajs.vim'                " yet another JavaScript syntax
Plug 'mxw/vim-jsx'                    " React JSX syntax lighting/indenting
Plug 'suan/vim-instant-markdown'      " markdown live previewing
Plug 'metakirby5/codi.vim'            " live code scratchpad
Plug 'scrooloose/nerdcommenter'       " comment functions
Plug 'scrooloose/nerdtree'            " filesystem explorer
Plug 'tpope/vim-fugitive'             " git wrapper
Plug 'tpope/vim-surround'             " quoting/parenthesizing made simple
Plug 'mattn/emmet-vim'                " expands HTML/CSS abbreviations
Plug 'w0rp/ale'                       " async linting engine
Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue'] }
call plug#end()

" ————— Color Scheme ——————————————————————————————————————————————————

colorscheme cobalt2
" let g:dracula_italic = 0
" highlight Normal ctermbg=None
" let g:oceanic_next_terminal_bold = 1
" let g:oceanic_next_terminal_italic = 1

" ————— indentLine ————————————————————————————————————————————————————

" let g:indentLine_char = '×'
" let g:indentLine_char = '▸'
" let g:indentLine_char = '⌜'
" let g:indentLine_char = '▴'
" let g:indentLine_char = '◜'
let g:indentLine_char = '❘'
" let g:indentLine_char = '⌇'
" let g:indentLine_char = '⌞'

" ————— NERDCommenter —————————————————————————————————————————————————
let g:NERDCustomDelimiters = { 'javascript' : { 'left': '// ', 'leftAlt': '/* ', 'rightAlt': ' */' }}
let g:NERDTrimTrailingWhitespace = 1

" ————— NERDTree ——————————————————————————————————————————————————————
let g:NERDTreeRespectWildIgnore = 1
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" ————— vim-airline ———————————————————————————————————————————————————
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_extensions = ['branch','ale']
let g:airline_theme='simple'

" ————— vim-fugitive ——————————————————————————————————————————————————
set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}

" ————— emmet-vim —————————————————————————————————————————————————————
let g:user_emmet_leader_key=','
let g:user_emmet_settings = { 'javascript.jsx' : { 'extends' : 'jsx' }}

" ————— ale (async lint engine) ———————————————————————————————————————
let g:ale_sign_error = '👉'
let g:ale_sign_warning = '👻'
let g:ale_lint_on_enter = 0
let g:ale_maximum_file_size = 500000  " don't lint large files (> 500KB), it can slow things down
let g:ale_linters = {}
let g:ale_linters.javascript = ['eslint']
" let g:ale_linters.python = ['flake8']
" let g:ale_linters.html = []
let g:ale_fixers = {}
let g:ale_fixers.javascript = ['eslint', 'prettier']
" let g:ale_fixers.python = ['isort']
" let g:ale_javascript_prettier_options = ' --single-quote --trailing-comma none'

" ————— Prettier ——————————————————————————————————————————————————————
let g:prettier#config#semi = 'false'
let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'none'
